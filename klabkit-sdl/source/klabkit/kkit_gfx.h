#ifndef KLABKIT_GFX_H
#define KLABKIT_GFX_H

#include <SDL.h>
#include <array>
#include <tuple>
#include <vector>
#include "Project.h"

namespace kkit {

	using byte = unsigned char;
	using palette = std::vector<std::tuple<byte, byte, byte>>;

	namespace gfx {

		// bmp functions
		void project_walls_to_bmps(const kkit::Project& p_project);
		void project_map_to_bmp(const kkit::Project& p_project, int p_board_no);
		void set_surface_project_palette(SDL_Surface* p_surface, const kkit::Project& p_project);
		SDL_Surface* image_to_sdl_surface(const std::vector<std::vector<byte>>& p_image, const palette& p_palette);
		std::vector<std::vector<byte>> load_bmp(const palette& p_palette, const std::string& p_filename);
		byte find_nearest_palette_index(SDL_Color p_color, const palette& p_palette);

		// program graphics
		std::vector<SDL_Texture*> get_project_textures(SDL_Renderer* p_rnd, const kkit::Project& p_project);
		std::vector<SDL_Texture*> get_program_textures(SDL_Renderer* p_rnd, const kkit::Project& p_project);

		// utility functions
		std::vector<SDL_Color> tuple_to_sdl_palette(const palette&);
		void bmp_to_lzw_file(const palette& p_palette, const std::string& p_out_file);
		std::vector<std::vector<byte>> flat_image_to_2d(const std::vector<byte>& p_input);

		// constant graphics
		// using lzw-compression to save space ;)
		constexpr std::array<byte, 347> LZW_BYTES_DIR_ARROW{ { 0x2D, 0x02, 0xFF, 0x00, 0x06, 0x14, 0x38, 0x90, 0x60, 0x41, 0x83, 0x07, 0x11, 0x26, 0x54, 0xB8, 0x10, 0xA0, 0x3B, 0x86, 0x0F, 0x21, 0x46, 0x74, 0x37, 0x31, 0x62, 0x45, 0x8B, 0x04, 0x27, 0x66, 0xBC, 0xB8, 0x51, 0x62, 0x46, 0x8D, 0x1C, 0x41, 0x22, 0xF4, 0x38, 0x32, 0x64, 0xC9, 0x81, 0x23, 0x51, 0x9A, 0x54, 0x89, 0x32, 0xA5, 0x4A, 0x8E, 0xEC, 0x58, 0xB2, 0x74, 0x79, 0x11, 0x66, 0x4C, 0x99, 0x33, 0x21, 0xD6, 0xB4, 0x79, 0x13, 0xA7, 0x42, 0x9D, 0x3B, 0x79, 0xF6, 0x34, 0xB8, 0x26, 0x4D, 0xD1, 0xA2, 0x6B, 0x76, 0x1A, 0x2D, 0xCA, 0x46, 0xE8, 0xC3, 0x34, 0x36, 0xD9, 0x35, 0xBD, 0xF8, 0x34, 0x66, 0x54, 0xA9, 0x15, 0xA9, 0xB2, 0xB4, 0x7A, 0x15, 0x62, 0x1A, 0x37, 0x31, 0x99, 0x72, 0xED, 0xEA, 0x86, 0x6C, 0xD9, 0xB2, 0x61, 0xC5, 0x32, 0xF4, 0x6A, 0xD6, 0x2C, 0xDA, 0xB4, 0x0A, 0xD7, 0xB2, 0x25, 0xEB, 0xF6, 0x2D, 0xC2, 0xB8, 0x72, 0xE9, 0xD6, 0x35, 0x78, 0x97, 0x6D, 0x5E, 0xBD, 0x04, 0xF9, 0xB6, 0xFD, 0x9B, 0x30, 0xF0, 0xD9, 0xC1, 0x76, 0xE5, 0x1A, 0x3E, 0xBC, 0x37, 0xF1, 0xDC, 0xC5, 0x8C, 0x1B, 0xFB, 0x7D, 0x5C, 0xD8, 0xF1, 0x63, 0xC0, 0x66, 0x59, 0xB5, 0x62, 0xB5, 0x99, 0xF3, 0x66, 0xCB, 0x00, 0xD5, 0x90, 0x3D, 0x33, 0xFA, 0x33, 0xC2, 0xD0, 0x6C, 0x46, 0x9F, 0xD9, 0xF9, 0x59, 0x0D, 0x1B, 0x35, 0x45, 0x55, 0xDB, 0x64, 0xED, 0x1A, 0xF6, 0x6A, 0xCB, 0x6C, 0x68, 0xA7, 0x89, 0x1D, 0xF3, 0x33, 0xEE, 0xD7, 0xBA, 0x6D, 0x3F, 0x6E, 0xAD, 0x86, 0xF8, 0xEE, 0xA0, 0x8B, 0x71, 0xE3, 0x36, 0xDE, 0xB2, 0x34, 0xC0, 0xAC, 0xC7, 0x3F, 0x53, 0x26, 0xDB, 0x3C, 0xA0, 0x74, 0x37, 0xD4, 0x9D, 0x37, 0x9E, 0x8E, 0xDD, 0x3A, 0xF6, 0x7F, 0xDD, 0xB9, 0x6B, 0xBF, 0x1E, 0x5E, 0xBB, 0x77, 0xF0, 0xD4, 0xCF, 0x37, 0x4F, 0x5F, 0x7A, 0x7D, 0x74, 0xF1, 0xE6, 0xDF, 0x3F, 0x66, 0x93, 0x26, 0x39, 0x1B, 0xF1, 0x6E, 0xEA, 0xE3, 0xFE, 0x9B, 0xA6, 0x75, 0x7E, 0xFF, 0xFE, 0xAD, 0x71, 0xD8, 0x19, 0xFD, 0xFD, 0x57, 0xE0, 0x63, 0x67, 0x14, 0xF8, 0x9F, 0x1A, 0xB7, 0xD1, 0x97, 0x60, 0x72, 0x0B, 0x7E, 0xB6, 0x06, 0x81, 0x05, 0x42, 0x58, 0x9A, 0x84, 0x0E, 0x7A, 0x77, 0xA1, 0x81, 0xDE, 0x4D, 0x58, 0x9F, 0x77, 0x01, 0x75, 0x28, 0x59, 0x73, 0xC4, 0x11, 0x27, 0x22, 0x75, 0xB4, 0x7D, 0x68, 0x50, 0x85, 0x26, 0x99 } };
		constexpr std::array<byte, 267> LZW_BYTES_PLAYER_POS{ { 0xEB, 0x01, 0xFF, 0x00, 0x06, 0x14, 0x38, 0x90, 0x60, 0x41, 0x83, 0x07, 0x11, 0x26, 0x54, 0xB8, 0x90, 0x61, 0x43, 0x87, 0x0F, 0x21, 0x46, 0x94, 0x38, 0x91, 0x62, 0x45, 0x8B, 0x17, 0x31, 0x66, 0xD4, 0xB8, 0x91, 0x63, 0x47, 0x8F, 0x1F, 0x41, 0x86, 0x14, 0x19, 0x30, 0xDB, 0xB4, 0x91, 0x16, 0xB3, 0x95, 0x34, 0x79, 0x52, 0x62, 0xB6, 0x0D, 0x2A, 0x59, 0x46, 0x74, 0xF9, 0x72, 0xDA, 0xCA, 0x98, 0x0D, 0x67, 0xD2, 0xB4, 0x79, 0x53, 0x61, 0x4E, 0x9D, 0x3C, 0x17, 0xFA, 0xFC, 0x09, 0x14, 0xA1, 0xD0, 0xA1, 0x44, 0x0B, 0x1A, 0x3D, 0x8A, 0x54, 0xA0, 0xD2, 0xA5, 0x4C, 0xFF, 0x39, 0x7D, 0x8A, 0x54, 0xEA, 0x54, 0xA0, 0x55, 0xAD, 0xDE, 0xC4, 0x9A, 0x95, 0xE5, 0x56, 0xAE, 0x23, 0xBD, 0x7E, 0x0D, 0x19, 0xF6, 0x65, 0x4A, 0xB3, 0x67, 0xD1, 0xA6, 0x3D, 0xBB, 0xF3, 0x21, 0xD9, 0x0D, 0x6F, 0xE1, 0xC6, 0x95, 0x3B, 0x37, 0x2E, 0x4C, 0x88, 0x6E, 0xE9, 0xE6, 0xD5, 0x2B, 0x36, 0xE9, 0x5E, 0xBF, 0x7F, 0xF5, 0xDA, 0xC5, 0x09, 0x98, 0x70, 0x61, 0xBE, 0x4D, 0x0D, 0x27, 0xF6, 0x2B, 0xB8, 0xA7, 0x62, 0xC7, 0x79, 0x19, 0x37, 0x7E, 0x3C, 0xF9, 0x6D, 0x64, 0xC9, 0x94, 0x1D, 0x5B, 0xBE, 0x8C, 0xD9, 0xB0, 0xE6, 0xCD, 0x9C, 0x01, 0x7B, 0xFE, 0x0C, 0x7A, 0xAF, 0xE8, 0xD1, 0x81, 0xD5, 0xA6, 0x56, 0xCD, 0xF6, 0x2E, 0x61, 0xD3, 0x60, 0x43, 0xD7, 0x84, 0x1A, 0xF5, 0xEF, 0xEB, 0x93, 0x58, 0x6D, 0xDF, 0x2E, 0x2D, 0x7B, 0x36, 0x40, 0xA9, 0xB9, 0xBB, 0x42, 0xE6, 0xDD, 0xDB, 0x37, 0x5D, 0xE0, 0x31, 0x8D, 0x1E, 0x47, 0x2E, 0x57, 0xF9, 0x72, 0xB8, 0xCD, 0x9D, 0x1F, 0xA6, 0x5A, 0x79, 0x38, 0x71, 0x82, 0x2E, 0xA1, 0xF3, 0x4C, 0x59, 0xDD, 0xFA, 0x75, 0xD6, 0xDD, 0xC1, 0x87, 0x17, 0x3F, 0x9E, 0x7C, 0x79, 0xF3, 0xE7, 0xD1, 0x9F, 0x3C } };
		constexpr std::array<byte, 470> LZW_BYTES_STAR{ { 0x8F, 0x02, 0xFF, 0x00, 0x22, 0x29, 0x52, 0x89, 0x60, 0x41, 0x83, 0x07, 0x11, 0x26, 0x54, 0xB8, 0x50, 0x21, 0xA2, 0x2C, 0x00, 0x21, 0x66, 0x61, 0x38, 0x91, 0x62, 0x45, 0x8A, 0x46, 0x20, 0xFE, 0x33, 0x68, 0x04, 0xC9, 0x26, 0x8F, 0x1F, 0x41, 0x86, 0x14, 0x39, 0x92, 0x64, 0xC9, 0x8F, 0x48, 0x8C, 0x18, 0x44, 0x04, 0xB1, 0x20, 0x12, 0x26, 0x2F, 0x61, 0xC6, 0x94, 0x39, 0x93, 0x66, 0x4D, 0x9B, 0x34, 0x97, 0xA4, 0x24, 0x08, 0xB0, 0xE0, 0xA6, 0x9B, 0x3F, 0x81, 0x06, 0xB5, 0xA9, 0x93, 0x95, 0x46, 0x82, 0x42, 0x91, 0x26, 0xFD, 0xB9, 0x89, 0x60, 0x51, 0x82, 0x2E, 0x95, 0x46, 0x95, 0xFA, 0xB2, 0xA9, 0x51, 0x9F, 0x53, 0xB1, 0x22, 0xAD, 0x4A, 0xF0, 0x6A, 0x56, 0xAF, 0x37, 0xB7, 0x56, 0xEA, 0xFA, 0x95, 0xAC, 0xCC, 0xB0, 0x63, 0xCB, 0xA6, 0x3D, 0x9B, 0x96, 0x2D, 0xD5, 0x4A, 0x4E, 0xC5, 0xB6, 0x65, 0xBB, 0x16, 0xEB, 0x93, 0x26, 0x72, 0x61, 0xD2, 0x95, 0xDA, 0xE4, 0x49, 0x5F, 0xBC, 0x4C, 0xF4, 0x46, 0xE5, 0xDB, 0xD7, 0xAE, 0xDC, 0xC0, 0x4A, 0x09, 0x13, 0xBE, 0x3B, 0xF7, 0xAD, 0xD5, 0xBA, 0x89, 0xFB, 0x2E, 0x2E, 0x7B, 0x18, 0xE9, 0x60, 0xC8, 0x85, 0x27, 0x37, 0xE6, 0x3A, 0xF5, 0x72, 0x62, 0xC9, 0x33, 0x9B, 0x84, 0x16, 0x4A, 0x59, 0x68, 0x67, 0xD3, 0xA7, 0x83, 0x92, 0x0E, 0x7A, 0x9A, 0xB5, 0xE7, 0xD4, 0x9A, 0xE3, 0x4A, 0x6D, 0x3D, 0x7B, 0x34, 0x6C, 0xB4, 0xA5, 0x67, 0xB7, 0xAE, 0x0D, 0xF7, 0xF6, 0xEA, 0xDC, 0xA7, 0x3F, 0x83, 0xB5, 0xAD, 0xD4, 0xF2, 0xEF, 0xCE, 0x5A, 0x87, 0x0B, 0x2D, 0x6E, 0xFC, 0x72, 0x70, 0xE1, 0xBC, 0x71, 0x33, 0x47, 0x8D, 0x1C, 0xFA, 0xCF, 0xE5, 0xD2, 0x2F, 0x27, 0x55, 0x0D, 0x13, 0xBB, 0x6E, 0xED, 0xC9, 0x6B, 0x76, 0xF7, 0x4E, 0xDD, 0x71, 0xCD, 0xEB, 0xE2, 0x13, 0x2B, 0xDD, 0xCE, 0xE4, 0x3C, 0xFA, 0x27, 0xEA, 0xC1, 0x9B, 0x77, 0xDF, 0xFC, 0x7B, 0x75, 0xEB, 0xF3, 0xD3, 0x93, 0xDF, 0x1C, 0x7D, 0xBE, 0x73, 0x9B, 0xEB, 0x81, 0x86, 0xDF, 0x7B, 0xBB, 0x95, 0x97, 0x54, 0x7B, 0xC6, 0xF9, 0x47, 0x13, 0x80, 0xE1, 0xCD, 0x47, 0xE0, 0x7E, 0xC4, 0x35, 0xF8, 0x9A, 0x7D, 0x88, 0xB9, 0x97, 0xA0, 0x59, 0xF1, 0x25, 0x85, 0x9F, 0x84, 0x05, 0x52, 0x08, 0x1C, 0x4C, 0xA1, 0x85, 0xE6, 0x1A, 0x50, 0x0B, 0xCA, 0x67, 0x9A, 0x5A, 0x18, 0x66, 0x78, 0xDC, 0x89, 0x13, 0x76, 0x98, 0xDF, 0x8A, 0x1C, 0xB6, 0xE8, 0x57, 0x5B, 0x24, 0x96, 0x88, 0xD9, 0x8C, 0x28, 0xA6, 0x68, 0xA1, 0x57, 0x34, 0xFE, 0xF5, 0x13, 0x8F, 0x3D, 0xFE, 0x87, 0x23, 0x90, 0xF5, 0xC1, 0x38, 0x24, 0x7C, 0x2C, 0x1A, 0x49, 0xE4, 0x83, 0x49, 0x1E, 0x59, 0x24, 0x93, 0x1B, 0x12, 0x64, 0xC4, 0x93, 0x4A, 0x2D, 0x11, 0x56, 0x25, 0x53, 0x26, 0x85, 0x44, 0x55, 0x03, 0x55, 0x22, 0x25, 0x96, 0x40, 0x31, 0x55, 0x95, 0x51, 0x04, 0x29, 0xF1, 0x65, 0x4D, 0x4B, 0xA8, 0x63, 0x10, 0x44, 0x3A, 0x59, 0xD4, 0xA6, 0x9B, 0x14, 0x3D, 0x04, 0x91, 0x96, 0x6F, 0xD2, 0x59, 0x27, 0x41, 0x3F, 0x64, 0x04, 0x11, 0x2B, 0x7B, 0xF2, 0xD9, 0xA7, 0x9F, 0x7F, 0x02, 0x1A, 0xA8, 0xA0, 0x82, 0x72, 0x91, 0xA7, 0xA1, 0x87, 0x22, 0x9A, 0xA8, 0xA2, 0x8B, 0x32, 0xFA, 0xCF, 0x3F } };
	}

}

#endif
